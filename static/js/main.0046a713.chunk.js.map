{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","query","resumes","event","setState","target","value","_this2","axios","get","then","response","data","catch","error","console","log","datas","map","index","react_default","a","createElement","first","last","href","link","className","id","onChange","searchHandler","bind","placeholder","onClick","buttonHandler","Form","Group","controlId","Label","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAoFeA,cA7Eb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GACPC,QAAQ,IAJMT,6EAQNU,GACZP,KAAKQ,SAAS,CAACH,MAAOE,EAAME,OAAOC,8CAGvBH,GAAM,IAAAI,EAAAX,KACdK,EAAQL,KAAKI,MAAMC,MAKvB,OAJIA,GACAL,KAAKQ,SAAS,CAACF,QAAS,KAGrBM,IAAMC,IAAI,sDAAsDR,GAAOS,KAAK,SAAAC,GAC/EJ,EAAKH,SAAS,CAACF,QAASS,EAASC,SACpCC,MAAM,SAAAC,GACPC,QAAQC,IAAIF,sCAOV,IAAMG,EAAQrB,KAAKI,MAAME,QAAQgB,IAAI,SAACN,EAAKO,GACzC,OACEC,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UAAKH,EAAM,GACXC,EAAAC,EAAAC,cAAA,UAAKV,EAAKW,OACVH,EAAAC,EAAAC,cAAA,UAAKV,EAAKY,MACVJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAM,oDAAoDb,EAAKc,KAAMrB,OAAO,UAAUO,EAAKc,UAKtG,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACfP,EAAAC,EAAAC,cAAA,KAAGK,UAAU,qBAEbP,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,0FAEAF,EAAAC,EAAAC,cAAA,OAAKM,GAAG,OACRR,EAAAC,EAAAC,cAAA,SAAOM,GAAG,QAASC,SAAUjC,KAAKkC,cAAcC,KAAKnC,MAAOoC,YAAY,gBACxEZ,EAAAC,EAAAC,cAAA,UAAQM,GAAG,QAAQK,QAASrC,KAAKsC,cAAcH,KAAKnC,OAApD,WAEAwB,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACAf,EAAAC,EAAAC,cAACa,EAAA,EAAKC,MAAN,CAAYC,UAAU,YACZjB,EAAAC,EAAAC,cAACa,EAAA,EAAKG,MAAN,gDACAlB,EAAAC,EAAAC,cAAA,UAAQK,UAAU,iCACtBP,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,UAAQhB,MAAM,KAAd,QAKNc,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACFF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qBAEDL,WAvEesB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.0046a713.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {Form} from \"react-bootstrap\";\nimport axios from 'axios';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      query :\"\",\n      resumes:[]\n    };\n  }\n\nsearchHandler(event){\n  this.setState({query: event.target.value});\n}\n\nbuttonHandler(event){\n  let query = this.state.query;\n  if(!query){\n      this.setState({resumes: []});\n  }\n\n  return axios.get('http://cs410resumeranker.herokuapp.com/api/ranking/'+query).then(response => {\n      this.setState({resumes: response.data});\n}).catch(error => {\n  console.log(error)\n})\n\n}\n\n\n  render() {\n    const datas = this.state.resumes.map((data,index) => {\n      return (\n        <tr>\n        <td>{index+1}</td>\n        <td>{data.first}</td>\n        <td>{data.last}</td>\n        <td><a href={\"https://cs410resumeranker.herokuapp.com/api/file/\"+data.link} target=\"_blank\">{data.link}</a></td>\n        </tr>\n\n     )\n});\n    return (\n      <div className=\"App\">\n      <div className=\"head\">\n      <div className=\"icon\">\n      <i className=\"fas fa-portrait\"></i>\n      </div>\n      <h1>Resume Ranker</h1>\n      <h2>CS410 Final project by: Peng Gu, Jiawen Wu, Jinlin Xu, Yujie Shao, Kehan Li</h2>\n      </div>\n      <div id=\"bar\">\n      <input id=\"s_bar\"  onChange={this.searchHandler.bind(this)} placeholder=\"Search here\"/>\n      <button id=\"myBtn\" onClick={this.buttonHandler.bind(this)}>Search</button>\n      </div>\n      <Form>\n      <Form.Group controlId=\"formName\">\n                <Form.Label>How many resumes would you like to see?</Form.Label>\n                <select className=\"browser-default custom-select\">\n            <option>Choose your option</option>\n            <option value=\"1\">1</option>\n            </select>\n              </Form.Group>\n      </Form>\n\n      <table>\n      <tr>\n    <th>Ranking</th>\n    <th>Firstname</th>\n    <th>Lastname</th>\n    <th>Resume</th>\n  </tr>\n  {datas}\n  </table>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}