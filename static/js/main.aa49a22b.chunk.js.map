{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","length","num_file","query","resumes","event","setState","target","value","_this2","axios","get","then","response","data","catch","error","console","log","_this3","r","slice","_this4","datas","map","index","react_default","a","createElement","first","last","href","link","className","id","onChange","searchHandler","bind","placeholder","Form","Group","controlId","Label","e","numHandler","Array","from","x","i","key","Button","onClick","buttonHandler","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa49a22b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {Form, Button} from \"react-bootstrap\";\nimport axios from 'axios';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      length : 0,\n      num_file:1,\n      query :\"\",\n      resumes:[]\n    };\n  }\nnumHandler(event){\n  this.setState({num_file: event.target.value});\n\n}\nsearchHandler(event){\n  this.setState({query: event.target.value});\n\n  return axios.get('https://cs410resumeranker.herokuapp.com/api/ranking/'+ event.target.value).then(response => {\n      this.setState({length: response.data.length})\n}).catch(error => {\n  console.log(error)\n})\n\n}\n\nbuttonHandler(event){\n  let query = this.state.query;\n  if(!query){\n      this.setState({resumes: []});\n  }\n\n  return axios.get('https://cs410resumeranker.herokuapp.com/api/ranking/'+query).then(response => {\n    var r = response.data.slice(0,this.state.num_file);\n    console.log(this.state.length)\n      this.setState({resumes: r});\n}).catch(error => {\n  console.log(error)\n})\n\n}\n\n\n\n  render() {\n    const datas = this.state.resumes.map((data,index) => {\n      return (\n        <tr>\n        <td>{index+1}</td>\n        <td>{data.first}</td>\n        <td>{data.last}</td>\n        <td><a href={\"https://cs410resumeranker.herokuapp.com/api/file/\"+data.link} target=\"_blank\">{data.link}</a></td>\n        </tr>\n     )\n});\n    return (\n\n      <div className=\"App\">\n      <div className=\"head\">\n      <div className=\"icon\">\n      <i className=\"fas fa-portrait\"></i>\n      </div>\n      <h1>Resume Ranker</h1>\n      <h2>CS410 Final project by: Peng Gu, Jiawen Wu, Jinlin Xu, Yujie Shao, Kehan Li</h2>\n      </div>\n      <div id='search'>\n      <div id=\"bar\">\n      <input id=\"s_bar\"  onChange={this.searchHandler.bind(this)} placeholder=\"Enter the keyword here first\"/>\n      </div>\n      <div id='form_div'>\n      <Form>\n      <Form.Group controlId=\"formName\">\n                <Form.Label>How many resumes would you like to see?</Form.Label>\n                <select className=\"browser-default custom-select\" onChange={e => this.numHandler(e)}>\n            {\n            Array.from({length: this.state.length}).map((x, i) => {\n              return  (\n                <option key={i+1}>{i+1}</option>\n              )\n              })\n          }\n            </select>\n              </Form.Group>\n      </Form>\n      <Button id=\"myBtn\" onClick={this.buttonHandler.bind(this)}>Search</Button>\n      </div>\n      </div>\n      <table>\n      <tr>\n    <th>Ranking</th>\n    <th>First name</th>\n    <th>Last name</th>\n    <th>Resume</th>\n  </tr>\n  {datas}\n  </table>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}